{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "dependabot",
      "metadata": {
        "description": "Name of the resources"
      }
    },
    "projectUrl": {
      "type": "string",
      "metadata": {
        "description": "URL of the project. For example \"https://dev.azure.com/fabrikam/DefaultCollection\""
      }
    },
    "projectToken": {
      "type": "string",
      "metadata": {
        "description": "Token for accessing the project."
      }
    },
    "synchronizeOnStartup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to synchronize repositories on startup."
      }
    },
    "createOrUpdateWebhooksOnStartup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create or update subscriptions on startup."
      }
    },
    "debugAllJobs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to debug all jobs."
      }
    },
    "githubToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Access token for authenticating requests to GitHub."
      }
    },
    "failOnException": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether update jobs should fail when an exception occurs."
      }
    },
    "autoComplete": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to set auto complete on created pull requests."
      }
    },
    "autoCompleteIgnoreConfigs": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Identifiers of configs to be ignored in auto complete. E.g 3,4,10"
      }
    },
    "autoCompleteMergeStrategy": {
      "type": "string",
      "defaultValue": "Squash",
      "allowedValues": [
        "NoFastForward",
        "Rebase",
        "RebaseMerge",
        "Squash"
      ],
      "metadata": {
        "description": "Merge strategy to use when setting auto complete on created pull requests."
      }
    },
    "autoApprove": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to automatically approve created pull requests."
      }
    },
    "jobsResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group where jobs will be created."
      }
    },
    "notificationsPassword": {
      "type": "string",
      "defaultValue": "[uniqueString('service-hooks', resourceGroup().id)]",
      "metadata": {
        "description": "Password for Webhooks, ServiceHooks, and Notifications from Azure DevOps."
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "#{GITVERSION_NUGETVERSIONV2}#",
      "metadata": {
        "description": "Tag of the docker images."
      }
    },
    "minReplicas": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 2,
      "metadata": {
        "description": "The minimum number of replicas"
      }
    },
    "maxReplicas": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 5,
      "metadata": {
        "description": "The maximum number of replicas"
      }
    }
  },
  "variables": {
    "sqlServerAdministratorLogin": "[uniqueString(resourceGroup().id)]",
    "sqlServerAdministratorLoginPassword": "[format('{0}%{1}', skip(uniqueString(resourceGroup().id), 5), uniqueString('sql-password', resourceGroup().id))]",
    "collisionSuffix": "[uniqueString(resourceGroup().id)]",
    "fileShareName": "working-dir"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}/{2}', format('{0}{1}', parameters('name'), variables('collisionSuffix')), 'default', variables('fileShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.App/managedEnvironments/storages",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', parameters('name'), variables('fileShareName'))]",
      "properties": {
        "azureFile": {
          "accessMode": "ReadWrite",
          "shareName": "[variables('fileShareName')]",
          "accountName": "[format('{0}{1}', parameters('name'), variables('collisionSuffix'))]",
          "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix'))), '2022-09-01').keys[0].value]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}-jobs', parameters('name'))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}-{1}', parameters('name'), variables('collisionSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "disableLocalAuth": false,
        "zoneRedundant": false
      },
      "sku": {
        "name": "Basic"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}{1}', parameters('name'), variables('collisionSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        }
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}-{1}', parameters('name'), variables('collisionSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "administratorLogin": "[variables('sqlServerAdministratorLogin')]",
        "administratorLoginPassword": "[variables('sqlServerAdministratorLoginPassword')]",
        "primaryUserAssignedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
        "restrictOutboundNetworkAccess": "Disabled"
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2022-08-01-preview",
      "name": "[format('{0}/{1}', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'AllowAllWindowsAzureIps')]",
      "properties": {
        "endIpAddress": "0.0.0.0",
        "startIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', format('{0}-{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), parameters('name'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 2147483648,
        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
        "zoneRedundant": false,
        "readScale": "Disabled",
        "requestedBackupStorageRedundancy": "Geo",
        "isLedgerOn": false
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
        "[resourceId('Microsoft.Sql/servers', format('{0}-{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "workspaceCapping": {
          "dailyQuotaGb": "[json('0.167')]"
        }
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').primarySharedKey]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 80,
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          },
          "secrets": [
            {
              "name": "connection-strings-application-insights",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "connection-strings-sql",
              "value": "[join(createArray(format('Server=tcp:{0},1433', reference(resourceId('Microsoft.Sql/servers', format('{0}-{1}', parameters('name'), variables('collisionSuffix'))), '2022-05-01-preview').fullyQualifiedDomainName), format('Initial Catalog={0}', parameters('name')), format('User ID={0}', variables('sqlServerAdministratorLogin')), format('Password={0}', variables('sqlServerAdministratorLoginPassword')), 'Persist Security Info=False', 'MultipleActiveResultSets=False', 'Encrypt=True', 'TrustServerCertificate=False', 'Connection Timeout=30'), ';')]"
            },
            {
              "name": "notifications-password",
              "value": "[parameters('notificationsPassword')]"
            },
            {
              "name": "project-token",
              "value": "[parameters('projectToken')]"
            },
            {
              "name": "log-analytics-workspace-key",
              "value": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').primarySharedKey]"
            },
            {
              "name": "storage-account-key",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix'))), '2022-09-01').keys[0].value]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "image": "[format('ghcr.io/tinglesoftware/dependabot-server:{0}', parameters('imageTag'))]",
              "name": "dependabot",
              "volumeMounts": [
                {
                  "mountPath": "/mnt/dependabot",
                  "volumeName": "[variables('fileShareName')]"
                }
              ],
              "env": [
                {
                  "name": "AZURE_CLIENT_ID",
                  "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').clientId]"
                },
                {
                  "name": "ASPNETCORE_FORWARDEDHEADERS_ENABLED",
                  "value": "true"
                },
                {
                  "name": "EFCORE_PERFORM_MIGRATIONS",
                  "value": "true"
                },
                {
                  "name": "ApplicationInsights__ConnectionString",
                  "secretRef": "connection-strings-application-insights"
                },
                {
                  "name": "ConnectionStrings__Sql",
                  "secretRef": "connection-strings-sql"
                },
                {
                  "name": "Workflow__SynchronizeOnStartup",
                  "value": "[if(parameters('synchronizeOnStartup'), 'true', 'false')]"
                },
                {
                  "name": "Workflow__LoadSchedulesOnStartup",
                  "value": "true"
                },
                {
                  "name": "Workflow__CreateOrUpdateWebhooksOnStartup",
                  "value": "[if(parameters('createOrUpdateWebhooksOnStartup'), 'true', 'false')]"
                },
                {
                  "name": "Workflow__ProjectUrl",
                  "value": "[parameters('projectUrl')]"
                },
                {
                  "name": "Workflow__ProjectToken",
                  "secretRef": "project-token"
                },
                {
                  "name": "Workflow__DebugJobs",
                  "value": "[format('{0}', parameters('debugAllJobs'))]"
                },
                {
                  "name": "Workflow__JobsApiUrl",
                  "value": "[format('https://{0}.{1}', parameters('name'), reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain)]"
                },
                {
                  "name": "Workflow__WorkingDirectory",
                  "value": "/mnt/dependabot"
                },
                {
                  "name": "Workflow__WebhookEndpoint",
                  "value": "[format('https://{0}.{1}/webhooks/azure', parameters('name'), reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain)]"
                },
                {
                  "name": "Workflow__SubscriptionPassword",
                  "secretRef": "notifications-password"
                },
                {
                  "name": "Workflow__ResourceGroupId",
                  "value": "[format('{0}/resourceGroups/{1}', subscription().id, parameters('jobsResourceGroupName'))]"
                },
                {
                  "name": "Workflow__LogAnalyticsWorkspaceId",
                  "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').customerId]"
                },
                {
                  "name": "Workflow__LogAnalyticsWorkspaceKey",
                  "secretRef": "log-analytics-workspace-key"
                },
                {
                  "name": "Workflow__ManagedIdentityId",
                  "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-jobs', parameters('name')))]"
                },
                {
                  "name": "Workflow__UpdaterContainerImageTemplate",
                  "value": "[format('ghcr.io/tinglesoftware/dependabot-updater-{{{{ecosystem}}}}:{0}', parameters('imageTag'))]"
                },
                {
                  "name": "Workflow__FailOnException",
                  "value": "[if(parameters('failOnException'), 'true', 'false')]"
                },
                {
                  "name": "Workflow__AutoComplete",
                  "value": "[if(parameters('autoComplete'), 'true', 'false')]"
                },
                {
                  "name": "Workflow__AutoCompleteIgnoreConfigs",
                  "value": "[join(parameters('autoCompleteIgnoreConfigs'), ';')]"
                },
                {
                  "name": "Workflow__AutoCompleteMergeStrategy",
                  "value": "[parameters('autoCompleteMergeStrategy')]"
                },
                {
                  "name": "Workflow__AutoApprove",
                  "value": "[if(parameters('autoApprove'), 'true', 'false')]"
                },
                {
                  "name": "Workflow__GithubToken",
                  "value": "[parameters('githubToken')]"
                },
                {
                  "name": "Workflow__Location",
                  "value": "[parameters('location')]"
                },
                {
                  "name": "Workflow__StorageAccountName",
                  "value": "[format('{0}{1}', parameters('name'), variables('collisionSuffix'))]"
                },
                {
                  "name": "Workflow__StorageAccountKey",
                  "secretRef": "storage-account-key"
                },
                {
                  "name": "Workflow__FileShareName",
                  "value": "[variables('fileShareName')]"
                },
                {
                  "name": "Authentication__Schemes__Management__Authority",
                  "value": "[format('{0}{1}/v2.0', environment().authentication.loginEndpoint, subscription().tenantId)]"
                },
                {
                  "name": "Authentication__Schemes__Management__ValidAudiences__0",
                  "value": "[format('https://{0}.{1}', parameters('name'), reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain)]"
                },
                {
                  "name": "Authentication__Schemes__ServiceHooks__Credentials__vsts",
                  "secretRef": "notifications-password"
                },
                {
                  "name": "EventBus__SelectedTransport",
                  "value": "ServiceBus"
                },
                {
                  "name": "EventBus__Transports__azure-service-bus__FullyQualifiedNamespace",
                  "value": "[split(split(reference(resourceId('Microsoft.ServiceBus/namespaces', format('{0}-{1}', parameters('name'), variables('collisionSuffix'))), '2021-11-01').serviceBusEndpoint, '/')[2], ':')[0]]"
                }
              ],
              "resources": {
                "cpu": "[json('0.25')]",
                "memory": "0.5Gi"
              },
              "probes": [
                {
                  "type": "Liveness",
                  "httpGet": {
                    "port": 80,
                    "path": "/liveness"
                  }
                },
                {
                  "type": "Readiness",
                  "httpGet": {
                    "port": 80,
                    "path": "/health"
                  },
                  "failureThreshold": 10,
                  "initialDelaySeconds": 3,
                  "timeoutSeconds": 5
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "[variables('fileShareName')]",
              "storageName": "[variables('fileShareName')]",
              "storageType": "AzureFile"
            }
          ],
          "scale": {
            "minReplicas": "[parameters('minReplicas')]",
            "maxReplicas": "[parameters('maxReplicas')]"
          }
        }
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
        "[resourceId('Microsoft.Insights/components', parameters('name'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-jobs', parameters('name')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('{0}-{1}', parameters('name'), variables('collisionSuffix')))]",
        "[resourceId('Microsoft.Sql/servers', format('{0}-{1}', parameters('name'), variables('collisionSuffix')))]",
        "[resourceId('Microsoft.Sql/servers/databases', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), parameters('name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'ContributorRoleAssignment')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'AzureServiceBusDataOwner')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'StorageBlobDataContributor')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'LogAnalyticsReader')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "sqlServerAdministratorLoginPassword": {
      "type": "string",
      "value": "[variables('sqlServerAdministratorLoginPassword')]"
    },
    "webhookEndpoint": {
      "type": "string",
      "value": "[format('https://{0}/webhooks/azure', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn)]"
    },
    "notificationsPassword": {
      "type": "string",
      "value": "[parameters('notificationsPassword')]"
    }
  }
}